// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// ar_init
int ar_init(const char* serialport, int baud);
RcppExport SEXP _arduinor_ar_init(SEXP serialportSEXP, SEXP baudSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const char* >::type serialport(serialportSEXP);
    Rcpp::traits::input_parameter< int >::type baud(baudSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_init(serialport, baud));
    return rcpp_result_gen;
END_RCPP
}
// ar_is_open
int ar_is_open(int fd);
RcppExport SEXP _arduinor_ar_is_open(SEXP fdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fd(fdSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_is_open(fd));
    return rcpp_result_gen;
END_RCPP
}
// ar_close
int ar_close(int fd);
RcppExport SEXP _arduinor_ar_close(SEXP fdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fd(fdSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_close(fd));
    return rcpp_result_gen;
END_RCPP
}
// ar_read
Rcpp::String ar_read(int fd, char eolchar, int buf_max, int timeout);
RcppExport SEXP _arduinor_ar_read(SEXP fdSEXP, SEXP eolcharSEXP, SEXP buf_maxSEXP, SEXP timeoutSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fd(fdSEXP);
    Rcpp::traits::input_parameter< char >::type eolchar(eolcharSEXP);
    Rcpp::traits::input_parameter< int >::type buf_max(buf_maxSEXP);
    Rcpp::traits::input_parameter< int >::type timeout(timeoutSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_read(fd, eolchar, buf_max, timeout));
    return rcpp_result_gen;
END_RCPP
}
// ar_flush
int ar_flush(int fd);
RcppExport SEXP _arduinor_ar_flush(SEXP fdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type fd(fdSEXP);
    rcpp_result_gen = Rcpp::wrap(ar_flush(fd));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_RunningMeanModule();

static const R_CallMethodDef CallEntries[] = {
    {"_arduinor_ar_init", (DL_FUNC) &_arduinor_ar_init, 2},
    {"_arduinor_ar_is_open", (DL_FUNC) &_arduinor_ar_is_open, 1},
    {"_arduinor_ar_close", (DL_FUNC) &_arduinor_ar_close, 1},
    {"_arduinor_ar_read", (DL_FUNC) &_arduinor_ar_read, 4},
    {"_arduinor_ar_flush", (DL_FUNC) &_arduinor_ar_flush, 1},
    {"_rcpp_module_boot_RunningMeanModule", (DL_FUNC) &_rcpp_module_boot_RunningMeanModule, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_arduinor(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
